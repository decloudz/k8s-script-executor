name: Release Helm Chart

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    # Add required permissions for chart-releaser with private repo
    permissions:
      contents: write    # Needed to create releases
      pages: write       # Needed to publish to GitHub Pages
      packages: read     # For accessing GitHub Packages
      id-token: write    # Needed for private repositories
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Get Docker image tag
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "image_tag=1.0.0" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${{ github.event.workflow_run.outputs.image_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Create temporary chart directory
        run: |
          # Extract version from tag
          VERSION=$(echo "${{ steps.get_tag.outputs.image_tag }}" | tr -d '[]' | cut -d',' -f1 | tr -d '"')
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
          fi
          
          # Create a temporary directory for packaging
          TEMP_DIR=$(mktemp -d)
          echo "TEMP_DIR=${TEMP_DIR}" >> $GITHUB_ENV
          
          # Copy all chart files except Chart.yaml
          cp -r deploy/chart/* "${TEMP_DIR}/"
          cp -r deploy/chart/.helmignore "${TEMP_DIR}/" || true
          
          # Create a fresh Chart.yaml
          echo "apiVersion: v2" > "${TEMP_DIR}/Chart.yaml"
          echo "name: k8s-script-executor" >> "${TEMP_DIR}/Chart.yaml"
          echo "description: A Helm chart for Kubernetes Script Executor" >> "${TEMP_DIR}/Chart.yaml"
          echo "type: application" >> "${TEMP_DIR}/Chart.yaml"
          echo "version: ${VERSION#v}" >> "${TEMP_DIR}/Chart.yaml"
          echo "appVersion: ${VERSION#v}" >> "${TEMP_DIR}/Chart.yaml"
          echo "maintainers:" >> "${TEMP_DIR}/Chart.yaml"
          echo "  - name: \"Ade Adegboye\"" >> "${TEMP_DIR}/Chart.yaml"
          echo "    email: \"alveocloudevops@gmail.com\"" >> "${TEMP_DIR}/Chart.yaml"
          echo "keywords:" >> "${TEMP_DIR}/Chart.yaml"
          echo "  - kubernetes" >> "${TEMP_DIR}/Chart.yaml"
          echo "  - script-executor" >> "${TEMP_DIR}/Chart.yaml"
          echo "  - automation" >> "${TEMP_DIR}/Chart.yaml"
          echo "home: \"https://github.com/alvdevcl/k8s-script-executor\"" >> "${TEMP_DIR}/Chart.yaml"
          echo "sources:" >> "${TEMP_DIR}/Chart.yaml"
          echo "  - \"https://github.com/alvdevcl/k8s-script-executor\"" >> "${TEMP_DIR}/Chart.yaml"
          
          # Verify contents
          echo "Temporary chart directory:"
          ls -la "${TEMP_DIR}"
          echo "Chart.yaml contents:"
          cat "${TEMP_DIR}/Chart.yaml"

      - name: Package Chart
        run: |
          # Package the chart from temp directory
          cd "${TEMP_DIR}"
          mkdir -p /tmp/helm-packages
          
          # Validate chart
          echo "Running helm lint..."
          helm lint .
          
          echo "Creating package..."
          helm package . --destination /tmp/helm-packages
          
          echo "Generated packages:"
          ls -la /tmp/helm-packages
      
      # Setup GitHub Pages for private repositories
      - name: Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v4
        if: always()

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_PACKAGE_PATH: /tmp/helm-packages
          CR_SKIP_EXISTING: "false"
          # Additional settings for private repositories
          CR_GIT_BASE_URL: "https://api.github.com/"
          CR_GIT_UPLOAD_URL: "https://uploads.github.com/"
          CR_OWNER: "${{ github.repository_owner }}"
          CR_GIT_REPO: "${{ github.event.repository.name }}"
          CR_PAGES_BRANCH: "gh-pages"
        with:
          skip_packaging: true
 