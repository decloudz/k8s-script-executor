name: Release Helm Chart

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Get Docker image tag
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "image_tag=1.0.0" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${{ github.event.workflow_run.outputs.image_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Prepare Working Directory
        run: |
          # Extract version from the first tag (assuming it's the semantic version)
          VERSION=$(echo "${{ steps.get_tag.outputs.image_tag }}" | tr -d '[]' | cut -d',' -f1 | tr -d '"')
          # If VERSION is empty, set a default version
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
          fi
          
          # Create a fresh working directory
          WORKING_DIR="/tmp/helm-chart-work"
          mkdir -p "${WORKING_DIR}"
          
          # Copy all chart files to working directory
          echo "Copying chart files to ${WORKING_DIR}"
          cp -r deploy/chart/* "${WORKING_DIR}/"
          cp -r deploy/chart/.helmignore "${WORKING_DIR}/" || true
          
          # Ensure Chart.yaml has the correct format and content
          echo "apiVersion: v2" > "${WORKING_DIR}/Chart.yaml"
          echo "name: k8s-script-executor" >> "${WORKING_DIR}/Chart.yaml"
          echo "description: A Helm chart for Kubernetes Script Executor" >> "${WORKING_DIR}/Chart.yaml"
          echo "type: application" >> "${WORKING_DIR}/Chart.yaml"
          echo "version: ${VERSION#v}" >> "${WORKING_DIR}/Chart.yaml"
          echo "appVersion: ${VERSION#v}" >> "${WORKING_DIR}/Chart.yaml"
          
          # Print debug information
          echo "Working directory contents:"
          ls -la "${WORKING_DIR}"
          echo "Chart.yaml contents:"
          cat "${WORKING_DIR}/Chart.yaml"
          
          # Create packages directory
          mkdir -p /tmp/helm-packages

      - name: Package Chart
        run: |
          WORKING_DIR="/tmp/helm-chart-work"
          
          # Verify Chart.yaml exists before packaging
          if [ ! -f "${WORKING_DIR}/Chart.yaml" ]; then
            echo "ERROR: Chart.yaml still missing in working directory!"
            exit 1
          fi
          
          # Package the chart
          echo "Packaging chart from ${WORKING_DIR}"
          helm package "${WORKING_DIR}" --destination /tmp/helm-packages
          
          # List packages
          echo "Generated packages:"
          ls -la /tmp/helm-packages

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_PACKAGE_PATH: /tmp/helm-packages
          CR_SKIP_EXISTING: "false"
        with:
          skip_packaging: true
 