name: Release Helm Chart

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    # Add required permissions for chart-releaser with private repo
    permissions:
      contents: write    # Needed to create releases
      pages: write       # Needed to publish to GitHub Pages
      packages: read     # For accessing GitHub Packages
      id-token: write    # Needed for private repositories
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Get Docker image tag
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "image_tag=1.0.0" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${{ github.event.workflow_run.outputs.image_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Debug Existing Chart Structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Helm version: $(helm version)"
          echo "Existing chart structure:"
          find deploy/chart -type f | sort
          
          # Check if Chart.yaml exists in the repo
          if [ -f deploy/chart/Chart.yaml ]; then
            echo "Chart.yaml exists in repo, contents:"
            cat deploy/chart/Chart.yaml
          else
            echo "Chart.yaml doesn't exist in repo"
          fi

      - name: Package Existing Chart
        run: |
          # Extract version from tag
          VERSION=$(echo "${{ steps.get_tag.outputs.image_tag }}" | tr -d '[]' | cut -d',' -f1 | tr -d '"')
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
          fi
          
          # Update version in the existing Chart.yaml
          echo "Updating version in existing Chart.yaml"
          if [ -f deploy/chart/Chart.yaml ]; then
            sed -i "s/^version:.*$/version: ${VERSION#v}/" deploy/chart/Chart.yaml
            sed -i "s/^appVersion:.*$/appVersion: ${VERSION#v}/" deploy/chart/Chart.yaml
            
            echo "Updated Chart.yaml contents:"
            cat deploy/chart/Chart.yaml
          else
            echo "ERROR: Chart.yaml does not exist in the repository!"
            exit 1
          fi
          
          # Create packages directory
          mkdir -p /tmp/helm-packages
          
          # Run helm commands from the chart directory
          cd deploy/chart
          
          echo "Working directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          
          echo "Running helm lint..."
          helm lint . --debug
          
          echo "Creating package..."
          helm package . --destination /tmp/helm-packages
          
          echo "Generated packages:"
          ls -la /tmp/helm-packages

      # Setup GitHub Pages for private repositories
      - name: Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v4
        if: always()

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_PACKAGE_PATH: /tmp/helm-packages
          CR_SKIP_EXISTING: "false"
          # Additional settings for private repositories
          CR_GIT_BASE_URL: "https://api.github.com/"
          CR_GIT_UPLOAD_URL: "https://uploads.github.com/"
          CR_OWNER: "${{ github.repository_owner }}"
          CR_GIT_REPO: "${{ github.event.repository.name }}"
          CR_PAGES_BRANCH: "gh-pages"
        with:
          skip_packaging: true
 