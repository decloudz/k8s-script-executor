name: Release Helm Chart

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    # Add required permissions for chart-releaser with private repo
    permissions:
      contents: write    # Needed to create releases
      pages: write       # Needed to publish to GitHub Pages
      packages: read     # For accessing GitHub Packages
      id-token: write    # Needed for private repositories
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Get Docker image tag
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "image_tag=1.0.0" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${{ github.event.workflow_run.outputs.image_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Manual Chart Preparation
        run: |
          # Extract version from tag
          VERSION=$(echo "${{ steps.get_tag.outputs.image_tag }}" | tr -d '[]' | cut -d',' -f1 | tr -d '"')
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
          fi
          
          # Update version in the existing Chart.yaml
          echo "Updating version in existing Chart.yaml"
          if [ -f deploy/chart/Chart.yaml ]; then
            sed -i "s/^version:.*$/version: ${VERSION#v}/" deploy/chart/Chart.yaml
            sed -i "s/^appVersion:.*$/appVersion: ${VERSION#v}/" deploy/chart/Chart.yaml
          fi
          
          # Create package directory
          mkdir -p /tmp/helm-packages
          
          # Package the chart manually by creating a tarball
          echo "Manually packaging chart..."
          CHART_NAME="k8s-script-executor-${VERSION#v}"
          cd deploy
          tar -czf "/tmp/helm-packages/${CHART_NAME}.tgz" chart/
          cd ..
          
          echo "Generated package:"
          ls -la /tmp/helm-packages
          
          # Create a tag for this version
          git tag -a "v${VERSION#v}" -m "Release ${VERSION#v}" || true
          echo "RELEASE_TAG=v${VERSION#v}" >> $GITHUB_ENV

      # Setup GitHub Pages for private repositories
      - name: Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v4
        if: always()

      # Use direct commands to update the Helm repository
      - name: Manually Update Helm Repository
        run: |
          # Create a directory for the index file
          mkdir -p .cr-index
          
          # Clone the gh-pages branch
          git clone --single-branch --branch gh-pages https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages-repo || true
          
          # Copy the existing index.yaml if it exists
          if [ -f gh-pages-repo/index.yaml ]; then
            cp gh-pages-repo/index.yaml .cr-index/
          fi
          
          # Create or update the index
          helm repo index --url "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" \
            --merge .cr-index/index.yaml .cr-index/
            
          # Copy the updated index to the gh-pages repo
          cp .cr-index/index.yaml gh-pages-repo/
          
          # Push the changes to gh-pages branch
          cd gh-pages-repo
          git add index.yaml
          git commit -m "Update Helm repository index" || true
          git push || true
          cd ..
          
          # Check if a GitHub release exists for this tag
          RELEASE_EXISTS=$(curl -s -I -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_TAG }}" | grep "HTTP/1.1 200")
            
          # Create a release if it doesn't exist
          if [ -z "$RELEASE_EXISTS" ]; then
            echo "Creating GitHub release for ${{ env.RELEASE_TAG }}"
            gh release create ${{ env.RELEASE_TAG }} /tmp/helm-packages/* --title "Release ${{ env.RELEASE_TAG }}" --generate-notes
          else
            echo "Release already exists for ${{ env.RELEASE_TAG }}"
          fi
 